Git Commands

1- git status - shows the status if the folder in .git or not or git repository or not
2- git init - initializes empty git repositories or in simple words makes a folder git repository
3- git add --a - adds all the files to staging area of the git
4- git add filename.extension - adds only that file to the staging area
5- git commit -m "any message" - commits staged files into the git server
6- git log - shows the commits with name email and timing
7- git - shows if git is installed or not
8- git config --global user.name "username" - adds the new users name.
9- git config --global user.email "emailId" - adds the new users emailId.
10- git config --li - shows the list of everything inside git with your username and email.
11- git config user.name - shows the username
12- git config user.email - shows the userEmailId.
13- rm -rf .git - removes the folder as a git respository
14- git clone link "name of the folder you wanna give" - clones someone elses git folder into yours and you
can give it any name you want.
15- touch filename.ex - generates a new empty file
16- touch .gitignore- generates a new gitignore file
17- add log file name into .gitignore to ignore the file from staging and tracking
18- add *.log to ignore all the log files
19- dir/ or folder name to ignore the complete folder
20- /dir/ to ignore only the outer folder
21- git diff compares files in working directory with the files in the staging area
22- git diff --staged compares files in staging area with files last commited 
23- git commit -a -m "message" commites file directly without sending it first to the staging area(but the
files that are untracked wont go to the commit.
24- git rm filename removes and stages the file.
25- git mv filename newfilename renames the file and adds it to the staging area
26- git rm --cached filename untracks the file so it wont show after updating after ignoring
27- git log -p shows the difference between commited files
28- git log -p -n shows the difference between n number of commited files
29- git log --stat shows a small summary of the commits.
30- git log --pretty=oneline shows all the commits in one line.
31- git log --pretty=short shows all the commits in a short manner
32- git log --pretty=full shows a lil more than the short command
33- git log --since=.2days,weeks,months,years shows the commits that happened in that time frame
34- git log --pretty=format:"%h -- %ae/an" shows the commit code and author's email/name.
35- git commit --amend you can use this command to merge 2 commits 



